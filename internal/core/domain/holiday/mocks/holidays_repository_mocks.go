// Code generated by MockGen. DO NOT EDIT.
// Source: holidays-seeker/internal/core/domain/holiday (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	holiday "holidays-seeker/internal/core/domain/holiday"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockRepository) Find(arg0 context.Context, arg1 string) ([]holiday.Holiday, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].([]holiday.Holiday)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockRepositoryMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRepository)(nil).Find), arg0, arg1)
}

// FindOne mocks base method.
func (m *MockRepository) FindOne(arg0 context.Context, arg1 string) (holiday.Holiday, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(holiday.Holiday)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockRepositoryMockRecorder) FindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockRepository)(nil).FindOne), arg0, arg1)
}

// LoadAll mocks base method.
func (m *MockRepository) LoadAll(arg0 context.Context, arg1 []holiday.Holiday) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadAll indicates an expected call of LoadAll.
func (mr *MockRepositoryMockRecorder) LoadAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAll", reflect.TypeOf((*MockRepository)(nil).LoadAll), arg0, arg1)
}
